<project name="ips"
         basedir="."
         default="build"
         xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:jacoco="antlib:org.jacoco.ant">

  <property name="project.name"       value="${ant.project.name}"/>
  <property name="release.version"    value="snapshot"/>
  <property name="build.environment"  value="development"
            description="Either 'production' or 'development'"/>
  <property name="war.name"           value="${project.name}-${release.version}"/>

  <property name="build.dir"    location="${basedir}/.build"/>
  <property name="distr.dir"    location="${build.dir}/distr"/>
  <property name="lib.dir"      location="${basedir}/lib"/>
  <property name="lib.dir.dev"  location="${basedir}/libdev"/>

  <property name="gen.dir"    location="${build.dir}/generated"/>
  <property name="esdp.dir"   location="${build.dir}/generated-esdp"/>
  <property name="madv.dir"   location="${build.dir}/generated-madv"/>
  <property name="test.dir"   location="${build.dir}/test"
            description="Path to the generated test reports"/>

  <property name="web.lib" location="web/WEB-INF/lib"/>

  <property name="src.dir" location="${basedir}/src/main/java"/>
  <property name="web.dir" location="${basedir}/src/main/webapp"/>
  <property name="resources.dir" location="${basedir}/src/main/resources"/>

  <property name="test.src.dir" location="${basedir}/src/test/java"/>
  <property name="test.res.dir" location="${basedir}/src/test/resources"/>

  <path id="classpath">
    <fileset dir="${lib.dir}"     includes="*.jar"/>
    <fileset dir="${lib.dir.dev}" includes="*.jar"/>
  </path>

  <target name="build" depends="build-war, test, liquibase-schema" description="Build WAR artifact"/>

  <target name="liquibase-schema" description="Archive database migration scripts">
    <zip destfile="${distr.dir}/liquibase.zip"
         basedir="db/liquibase"/>
  </target>

  <target name="resolve" description="Retrieve dependencies">
    <ivy:settings file="${user.home}/.ivy2/ivysettings.xml"/>
    <ivy:resolve/>
    <ivy:report/>

    <delete dir="${lib.dir}" failonerror="false"/>
    <mkdir dir="${lib.dir}"/>
    <ivy:retrieve type="jar,bundle" pattern="${lib.dir}/[artifact]-[revision].[ext]" conf="site"/>

    <delete dir="${lib.dir.dev}" failonerror="false"/>
    <mkdir dir="${lib.dir.dev}"/>
    <ivy:retrieve type="jar,bundle" pattern="${lib.dir.dev}/[artifact]-[revision].[ext]" conf="site_dev"/>

    <ivy:retrieve type="js" pattern="${web.dir}/js/[artifact].[ext]" conf="site"/>
  </target>

  <target name="clean" description="Clean output directories and resolved dependencies">
    <delete dir="${build.dir}" failonerror="false"/>
    <delete dir="${lib.dir}" failonerror="false"/>
    <delete dir="${lib.dir.dev}" failonerror="false"/>
  </target>

  <target name="init" depends="clean">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.dir}/classes"/>
    <mkdir dir="${build.dir}/web"/>
  </target>

  <target name="compile" depends="init, resolve, generate">
    <taskdef name="groovyc"
             classname="org.codehaus.groovy.ant.Groovyc"
             classpathref="classpath"/>

    <groovyc destdir="${build.dir}/classes">
      <src path="${src.dir}"/>
      <src path="${esdp.dir}"/>
      <src path="${madv.dir}"/>
      <classpath refid="classpath"/>

      <javac source="1.7" target="1.7"
             debug="on"
             encoding="UTF-8"
             includeantruntime="false"/>
    </groovyc>

    <antcall target="gen-version"/>
    <antcall target="gen-tznames"/>
  </target>

  <target name="build-exploded" depends="compile">
    <!-- Web resources -->
    <mkdir dir="${build.dir}/web"/>
    <copy todir="${build.dir}/web">
      <fileset dir="${web.dir}">
        <include name="**/*.*"/>
      </fileset>
      <firstmatchmapper>
        <mapper type="glob" from="resources/skins/mobak/styles/*.css" to="resources/skins/mobak/styles/*.css.${release.version}"/>
        <mapper type="glob" from="resources/skins/araks/styles/*.css" to="resources/skins/araks/styles/*.css.${release.version}"/>
        <mapper type="glob" from="resources/skins/eyeline/styles/*.css" to="resources/skins/eyeline/styles/*.css.${release.version}"/>
        <mapper type="glob" from="resources/skins/inomanet/styles/*.css" to="resources/skins/inomanet/styles/*.css.${release.version}"/>
        <mapper type="glob" from="*.js" to="*.js.${release.version}"/>
        <mapper type="identity"/>
      </firstmatchmapper>
    </copy>

    <!-- Classes -->
    <copy todir="${build.dir}/web/WEB-INF/classes/">
      <fileset dir="${build.dir}/classes">
        <include name="**/*.*"/>
      </fileset>
    </copy>

    <!-- Resources (with filtering) -->
    <copy todir="${build.dir}/web/WEB-INF/classes/">
      <filterset begintoken="$${" endtoken="}">
        <filter token="build.environment" value="${build.environment}"/>
      </filterset>
      <fileset dir="${resources.dir}">
        <include name="**/*.*"/>
        <exclude name="wsdl/**"/>
      </fileset>
    </copy>

    <!-- External dependencies -->
    <mkdir dir="${build.dir}/web/WEB-INF/lib"/>
    <copy todir="${build.dir}/web/WEB-INF/lib/">
      <fileset dir="${lib.dir}">
        <include name="*.jar"/>
      </fileset>
    </copy>
  </target>

  <target name="build-war" depends="build-exploded">
    <tstamp>
      <format property="build.date" pattern="yyyy.MM.dd"/>
      <format property="build.time" pattern="hh.mm ZZ" timezone="UTC"/>
    </tstamp>
    <mkdir dir="${distr.dir}"/>
    <jar jarfile="${distr.dir}/${war.name}.war"
         basedir="${build.dir}/web" >
      <manifest>
        <attribute name="Release-Version"   value="${release.version}"/>
        <attribute name="Built-On"          value="${build.date}"/>
        <attribute name="Built-At"          value="${build.time}"/>
      </manifest>
    </jar>
  </target>

  <target name="gen-version">
    <taskdef name="groovy"
             classname="org.codehaus.groovy.ant.Groovy"
             classpathref="classpath"/>

    <groovy src="${basedir}/src/utils/java/mobi/eyeline/ips/web/BuildVersionGenerator.groovy">
      <arg value="${gen.dir}"/>
      <arg value=".${release.version}"/>
    </groovy>

    <javac destdir="${build.dir}/classes">
      <src path="${gen.dir}"/>
      <classpath refid="classpath"/>
    </javac>
  </target>

  <target name="gen-tznames">
    <taskdef name="groovy"
             classname="org.codehaus.groovy.ant.Groovy"
             classpathref="classpath"/>

    <groovy src="${basedir}/src/utils/java/mobi/eyeline/ips/tzdata/GenTzData.groovy">
      <arg value="--source=${basedir}/src/utils/resources/tzdata"/>
      <arg value="--target=${gen.dir}"/>
      <arg value="en"/>
      <arg value="ru"/>
      <arg value="sk"/>
    </groovy>

    <copy todir="${build.dir}/classes">
      <fileset dir="${gen.dir}">
        <include name="tznames_*.*"/>
      </fileset>
    </copy>
  </target>

  <!-- Tests -->


  <target name="compile-test" depends="compile">
    <mkdir dir="${build.dir}/test-classes"/>

    <taskdef name="groovyc"
             classname="org.codehaus.groovy.ant.Groovyc"
             classpathref="classpath"/>

    <groovyc destdir="${build.dir}/test-classes"
             encoding="UTF-8">
      <src path="${test.src.dir}"/>
      <classpath refid="classpath"/>
      <classpath path="${build.dir}/classes"/>
    </groovyc>
  </target>

  <target name="test" description="Execute unit tests"
          depends="compile-test, compile">
    <mkdir dir="${test.dir}"/>
    <mkdir dir="${test.dir}/xml"/>

    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
      <classpath refid="classpath"/>
    </taskdef>

    <jacoco:coverage>
      <junit printsummary="true"
             failureproperty="junit.failure"
             fork="true"
             forkmode="once"
             dir="${test.dir}">
        <classpath>
          <pathelement location="${test.res.dir}"/>
          <pathelement location="${resources.dir}"/>
          <pathelement location="${build.dir}/classes"/>
          <pathelement location="${build.dir}/test-classes"/>
        </classpath>

        <classpath refid="classpath"/>

        <batchtest fork="yes" todir="${test.dir}/xml">
          <fileset dir="${build.dir}/test-classes">
            <include name="**/*Test.class"/>
            <!-- a '$' in the filename means it's an inner class -->
            <exclude name="**/*$*"/>
          </fileset>

          <formatter type="xml"/>
        </batchtest>
      </junit>
    </jacoco:coverage>

    <junitreport todir="${test.dir}/xml">
      <fileset dir="${test.dir}/xml"/>
      <report todir="${test.dir}/junit"/>
    </junitreport>

    <jacoco:report>
      <executiondata>
        <file file="${test.dir}/jacoco.exec"/>
      </executiondata>

      <structure name="IPS">
        <classfiles>
          <fileset dir="${build.dir}/classes">
            <!-- Borrowed and untouched. -->
            <exclude name="mobi/eyeline/ips/util/RequestParam*"/>
            <exclude name="mobi/eyeline/ips/util/LessFilter*"/>

            <!-- Generated. -->
            <exclude name="mobi/eyeline/ips/external/**/*"/>

            <exclude name="mobi/eyeline/ips/web/controllers/*Controller*"/>
            <exclude name="mobi/eyeline/ips/web/controllers/**/*Controller*"/>
          </fileset>
        </classfiles>
        <sourcefiles encoding="UTF-8">
          <fileset dir="${src.dir}"/>
        </sourcefiles>
      </structure>

      <html destdir="${test.dir}/coverage"/>
      <xml destfile="${test.dir}/coverage/report.xml"/>

    </jacoco:report>

    <fail if="junit.failure" message="Unit test(s) failed. See reports!"/>
  </target>

  <target name="gen-esdp-client">
    <delete dir="${esdp.dir}" failonerror="false"/>
    <mkdir dir="${esdp.dir}"/>
    <exec executable="${java.home}/../bin/wsimport" failonerror="true">
      <arg line="-Xnocompile -keep -p mobi.eyeline.ips.external.esdp -s ${esdp.dir} "/>
      <arg line="-wsdllocation http://localhost/console2/service-api?wsdl ${resources.dir}/wsdl/esdp/service-api.wsdl"/>
    </exec>
  </target>

  <target name="gen-madv-client">
    <delete dir="${madv.dir}" failonerror="false"/>
    <mkdir dir="${madv.dir}"/>
    <exec executable="${java.home}/../bin/wsimport" failonerror="true">
      <arg line="-Xnocompile -keep -p mobi.eyeline.ips.external.madv -s ${madv.dir} "/>
      <!-- XXX: local URL (this is not actually used). -->
      <arg line="-wsdllocation http://localhost:9080/services/campaigns?wsdl ${resources.dir}/wsdl/madv/campaigns-api.wsdl"/>
    </exec>
  </target>

  <target name="generate"
          depends="gen-esdp-client, gen-madv-client"
          description="Produce generated sources">
  </target>

</project>